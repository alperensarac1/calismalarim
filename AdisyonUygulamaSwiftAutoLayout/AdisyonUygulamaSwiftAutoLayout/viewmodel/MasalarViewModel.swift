//
//  MasalarViewModel.swift
//  AdisyonUygulamaSwiftAutoLayout
//
//  Created by Alperen SaraÃ§ on 6.06.2025.
//

import Foundation
import Combine

@MainActor
class MasalarViewModel: ObservableObject {
    // MARK: - YayÄ±nlanan (Published) Ã–zellikler
    @Published var masalar: [Masa] = []
    @Published var birlesmeSonucu: Bool = false

    // MARK: - DAO (Servis) Ã–rneÄŸi
    private let dao = AdisyonServisDao.shared

    // MARK: - MasalarÄ± YÃ¼kle
    /// `masalariGetir()` servisini Ã§aÄŸÄ±rarak `masalar` dizisini gÃ¼nceller.
    func masalariYukle() {
      Task {
        do {
          let liste = try await dao.masalariGetir()
          self.masalar = liste
        }
        catch let DecodingError.dataCorrupted(context) {
          print("ğŸ›‘ Data corrupted:", context)
        }
        catch let DecodingError.keyNotFound(key, context) {
          print("ğŸ›‘ Eksik anahtar '\(key.stringValue)':", context.debugDescription)
        }
        catch let DecodingError.typeMismatch(type, context) {
          print("ğŸ›‘ TÃ¼r uyumsuzluÄŸu '\(type)':", context.debugDescription)
        }
        catch let DecodingError.valueNotFound(value, context) {
          print("ğŸ›‘ DeÄŸer bulunamadÄ± '\(value)':", context.debugDescription)
        }
        catch {
          print("ğŸ›‘ DiÄŸer hata:", error)
        }
      }
    }


    // MARK: - Masa GÃ¼ncelle
    /// Var olan `masalar` dizisinden, `id` eÅŸleÅŸen masayÄ± gÃ¼nceller.
    /// - Parametre:
    ///   - masa: DeÄŸiÅŸmiÅŸ haliyle verilecek `Masa` nesnesi.
    func guncelleMasa(_ masa: Masa) {
        guard
            let index = masalar.firstIndex(where: { $0.id == masa.id })
        else { return }
        masalar[index] = masa
    }

    // MARK: - Masa Ekle
    /// Servise yeni bir masa eklemesi yaptÄ±rÄ±r. BaÅŸarÄ± durumunda `onSuccess` kapanÄ±ÅŸÄ± Ã§aÄŸrÄ±lÄ±r.
    /// - Parametre:
    ///   - onSuccess: Masa eklendikten sonra Ã§alÄ±ÅŸacak kapanÄ±ÅŸ bloÄŸu.
    func masaEkle(onSuccess: @escaping () -> Void) {
        Task {
            do {
                _ = try await dao.masaEkle()
                // BaÅŸarÄ±lÄ± ekleme durumunda UI gÃ¼ncellemesi yapmasÄ± iÃ§in main threadâ€™de onSuccess'i Ã§aÄŸÄ±rÄ±yoruz:
                onSuccess()
            } catch {
                print("MasalarViewModel â€“ Masa ekleme hatasÄ±: \(error.localizedDescription)")
            }
        }
    }

    // MARK: - Masa Sil
    /// IDâ€™si verilen masayÄ± silme servisini Ã§aÄŸÄ±rÄ±r.
    /// - Parametre:
    ///   - masaId: Silinmesi istenen masanÄ±n `id` deÄŸeri.
    func masaSil(masaId: Int) {
        Task {
            do {
                _ = try await dao.masaSil(masaId: masaId)
                // Ä°steÄŸe baÄŸlÄ±: Silindikten sonra masalar listesini yeniden yÃ¼kleyebilirsin.
            } catch {
                print("MasalarViewModel â€“ Masa silme hatasÄ±: \(error.localizedDescription)")
            }
        }
    }

    // MARK: - MasalarÄ± BirleÅŸtir
    /// Ä°ki masayÄ± birleÅŸtirme servisini Ã§aÄŸÄ±rÄ±r ve baÅŸarÄ±lÄ± olursa `birlesmeSonucu = true` yapar.
    /// - Parametreler:
    ///   - anaId: Ana masa idâ€™si.
    ///   - bId: BirleÅŸtirilecek masa idâ€™si.
    func masaBirlestir(anaId: Int, bId: Int) {
        Task {
            do {
                _ = try await dao.masaBirlestir(anaMasaId: anaId, birlestirilecekMasaId: bId)
                self.birlesmeSonucu = true
            } catch {
                print("MasalarViewModel â€“ BirleÅŸtirme hatasÄ±: \(error.localizedDescription)")
                self.birlesmeSonucu = false
            }
        }
    }
}
